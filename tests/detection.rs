#[cfg(test)]
mod detection_tests {
    use dlib_face_recognition::Rectangle;
    use image::ImageBuffer;
    use std::fs;
    use uuid::Uuid;
    use video_sentry::detection;
    use video_sentry::detection::face_image::FaceImage;
    use video_sentry::detection::photo::Photo;

    #[test]
    fn test_photo_public_attributes() {
        let item = Photo::new();

        assert_eq!(item.image, None);
        assert_eq!(item.faces.len(), 0);
        assert_eq!(item.face_detected, false);
        assert!(Uuid::parse_str(&item.uuid).is_ok(), "must be a uuid string");
    }

    #[test]
    fn test_photo_adding_faces() {
        let mut item = Photo::new();

        item.add_face(FaceImage::new());

        assert_eq!(item.faces.len(), 1);
        assert_eq!(item.face_detected, true);
    }

    #[test]
    fn test_photo_push_image() {
        let mut item = Photo::new();
        let image = image::DynamicImage::ImageLuma8(ImageBuffer::new(1, 1));

        item.push_img(image.clone());

        assert_eq!(item.image.unwrap(), image);
    }

    #[test]
    fn test_face_public_attributes() {
        let item = FaceImage::new();

        assert_eq!(item.face_location, None);
        assert_eq!(item.measurements.len(), 0);
        assert!(Uuid::parse_str(&item.uuid).is_ok(), "must be a uuid string");
    }

    #[test]
    fn test_face_image_store_face_location() {
        let mut item = FaceImage::new();
        let location = Rectangle {
            left: 1,
            top: 1,
            right: 1,
            bottom: 1,
        };

        item.store_face_location(location);

        assert_eq!(item.face_location.unwrap(), location);
    }

    #[test]
    fn test_face_image_store_measurements() {
        let mut item = FaceImage::new();
        let measurements: Vec<f64> = vec![-0.03625381365418434, 0.14430001378059387];

        item.store_measurements(measurements);

        assert_eq!(item.measurements.len(), 2);
    }

    #[test]
    fn test_call() {
        let photo = detection::call(&"tests/fixtures/1.jpg".to_string()).unwrap();

        assert_eq!(photo.faces.len(), 3);
        assert_eq!(photo.face_detected, true);
        assert!(
            Uuid::parse_str(&photo.uuid).is_ok(),
            "must be a uuid string"
        );

        let face_1_measurements: Vec<f64> = vec![
            -0.17397767305374146,
            0.04483885318040848,
            0.0053190868347883224,
            -0.018108133226633072,
            -0.19834299385547638,
            0.08907163888216019,
            -0.008257169276475906,
            -0.03794805333018303,
            0.16992628574371338,
            -0.11755307763814926,
            0.1490299552679062,
            -0.09510575979948044,
            -0.2164096236228943,
            0.03218128904700279,
            -0.07912987470626831,
            0.2239963263273239,
            -0.08812962472438812,
            -0.259572297334671,
            -0.026283659040927887,
            -0.13639777898788452,
            -0.004788339138031006,
            -0.04467114806175232,
            -0.07990017533302307,
            0.11814860254526138,
            -0.1681794673204422,
            -0.3012210428714752,
            0.03099352866411209,
            -0.06942102313041687,
            0.014134695753455162,
            -0.20509770512580872,
            0.039088670164346695,
            0.06746882200241089,
            -0.22156922519207,
            0.03854530304670334,
            0.029177939519286156,
            0.1794939488172531,
            0.005302804987877607,
            -0.13565504550933838,
            0.1899479180574417,
            0.01618051528930664,
            -0.26403945684432983,
            -0.014834264293313026,
            0.06047552451491356,
            0.2845490276813507,
            0.20613981783390045,
            0.01968614012002945,
            -0.012173866853117943,
            -0.0634741261601448,
            0.2143024504184723,
            -0.26440104842185974,
            0.011401087045669556,
            0.12843109667301178,
            0.04526054114103317,
            0.014787931926548481,
            -0.054390985518693924,
            -0.1902828812599182,
            0.023997671902179718,
            0.1217905580997467,
            -0.2051212191581726,
            -0.006259867921471596,
            0.043888505548238754,
            -0.08011593669652939,
            -0.01311484631150961,
            -0.04729488864541054,
            0.2500284016132355,
            0.09175832569599152,
            -0.09122542291879654,
            -0.1315997987985611,
            0.2799593508243561,
            -0.16025909781455994,
            0.014470694586634636,
            0.07938890159130096,
            -0.0947653278708458,
            -0.2138073444366455,
            -0.20215801894664764,
            0.07278330624103546,
            0.4228762090206146,
            0.12333274632692337,
            -0.07700487226247787,
            0.11464431881904602,
            -0.002442945959046483,
            0.06566902995109558,
            0.0016341317677870393,
            0.1741696149110794,
            -0.016062341630458832,
            -0.023205161094665527,
            -0.05751476436853409,
            0.031962327659130096,
            0.2639881670475006,
            0.03277401626110077,
            -0.020290223881602287,
            0.1808357834815979,
            -0.009670503437519073,
            -0.06060288846492767,
            0.04505595564842224,
            0.09274756908416748,
            -0.11033976078033447,
            0.026626739650964737,
            -0.08427919447422028,
            -0.07563085108995438,
            -0.010153665207326412,
            -0.02150190994143486,
            0.055450908839702606,
            0.09440282732248306,
            -0.23349276185035706,
            0.17354953289031982,
            -0.07755731791257858,
            0.03530807048082352,
            -0.04663927108049393,
            0.0013872887939214706,
            0.001896630972623825,
            0.03001895174384117,
            0.1260329633951187,
            -0.2994919717311859,
            0.16963036358356476,
            0.14829036593437195,
            0.05298589542508125,
            0.1876349300146103,
            0.0955638512969017,
            0.05772112309932709,
            0.10886254906654358,
            -0.05473874509334564,
            -0.18819810450077057,
            -0.06615328788757324,
            0.01987815834581852,
            -0.07808671146631241,
            0.047015029937028885,
            0.0821647047996521,
        ];
        let face_2_measurements: Vec<f64> = vec![
            -0.14429941773414612,
            0.13599322736263275,
            -0.035993315279483795,
            -0.10408186912536621,
            -0.07428114861249924,
            0.01225128211081028,
            -0.06069780886173248,
            -0.17635172605514526,
            0.2628289461135864,
            -0.11857019364833832,
            0.12348512560129166,
            -0.019895704463124275,
            -0.21481068432331085,
            -0.004413573071360588,
            -0.10326804965734482,
            0.13024137914180756,
            -0.2808946967124939,
            -0.17335914075374603,
            -0.030958322808146477,
            -0.011063036508858204,
            0.007383307442069054,
            -0.006125322077423334,
            0.03315335139632225,
            0.11813125759363174,
            -0.10740547627210617,
            -0.3482075035572052,
            -0.03366648405790329,
            -0.1576961725950241,
            -0.10248541831970215,
            0.017894616350531578,
            0.07821152359247208,
            0.05355154722929001,
            -0.1633908450603485,
            -0.011398550122976303,
            -0.0023839138448238373,
            0.10788312554359436,
            -0.04924741014838219,
            -0.03964774310588837,
            0.20416902005672455,
            -0.015091398730874062,
            -0.2506268322467804,
            -0.07705168426036835,
            0.09246012568473816,
            0.27639147639274597,
            0.26913028955459595,
            -0.051725875586271286,
            -0.02319931611418724,
            -0.12160205841064453,
            0.2736274302005768,
            -0.332501620054245,
            -0.032905444502830505,
            0.1660664677619934,
            0.09776642918586731,
            0.011563668958842754,
            0.1453142762184143,
            -0.11858832091093063,
            0.03714340180158615,
            0.11303070187568665,
            -0.1847839653491974,
            0.04730083793401718,
            0.0508158914744854,
            -0.08383097499608994,
            -0.01608451083302498,
            -0.1181391105055809,
            0.2434697449207306,
            0.1333584040403366,
            -0.15546391904354095,
            -0.11774399876594543,
            0.17379315197467804,
            -0.1742112785577774,
            -0.062182944267988205,
            0.12252465635538101,
            -0.08632350713014603,
            -0.2876931428909302,
            -0.2857060432434082,
            -0.02670213393867016,
            0.3754644989967346,
            0.16599252820014954,
            -0.10852929204702377,
            0.060219138860702515,
            -0.04604749009013176,
            -0.03130665048956871,
            0.020818354561924934,
            0.1784547120332718,
            -0.04953950271010399,
            0.028593771159648895,
            -0.09037655591964722,
            -0.025948751717805862,
            0.21630223095417023,
            -0.02257707342505455,
            -0.034312255680561066,
            0.25878825783729553,
            -0.0763348937034607,
            -0.002615278586745262,
            0.03175799548625946,
            0.08958958834409714,
            -0.16669592261314392,
            0.02359931357204914,
            -0.22844509780406952,
            -0.022563884034752846,
            0.03137590363621712,
            -0.03928277641534805,
            0.005078100133687258,
            0.04158187657594681,
            -0.15036344528198242,
            0.09636686742305756,
            -0.07630517333745956,
            0.0012762416154146194,
            -0.02334032952785492,
            -0.10711698979139328,
            -0.07677656412124634,
            0.009932423941791058,
            0.21897004544734955,
            -0.2238985300064087,
            0.1721632182598114,
            0.05054548382759094,
            0.002202836098149419,
            0.18689419329166412,
            0.060623910278081894,
            0.03511772304773331,
            -0.04852517694234848,
            -0.03602922335267067,
            -0.15343907475471497,
            -0.061204854398965836,
            0.04819631204009056,
            -0.04611819609999657,
            0.04778726398944855,
            -0.034400567412376404,
        ];
        let face_3_measurements: Vec<f64> = vec![
            -0.05246816575527191,
            0.009311765432357788,
            -0.0041296579875051975,
            -0.07358819991350174,
            -0.10450682044029236,
            0.06496104598045349,
            -0.04898373410105705,
            -0.06909488886594772,
            0.18919171392917633,
            -0.18157212436199188,
            0.16048234701156616,
            -0.0018748622387647629,
            -0.2670356035232544,
            -0.06186749413609505,
            -0.019889555871486664,
            0.16328278183937073,
            -0.1542176902294159,
            -0.19604051113128662,
            -0.05609201267361641,
            -0.04572363942861557,
            0.026994692161679268,
            0.09409049153327942,
            0.006830309052020311,
            0.06836805492639542,
            -0.13614928722381592,
            -0.27921345829963684,
            -0.01959051936864853,
            -0.11186335235834122,
            -0.13233797252178192,
            -0.16536791622638702,
            0.06739075481891632,
            0.12097456306219101,
            -0.1325814127922058,
            0.06534933298826218,
            -0.04082781821489334,
            0.10994018614292145,
            -0.0007123604882508516,
            -0.10540258139371872,
            0.16024112701416016,
            -0.0067436667159199715,
            -0.22632397711277008,
            -0.06601281464099884,
            0.023335188627243042,
            0.252135306596756,
            0.23349784314632416,
            -0.03594331815838814,
            -0.026574069634079933,
            -0.005192103795707226,
            0.11656130105257034,
            -0.3985685408115387,
            0.041100166738033295,
            0.09423431754112244,
            -0.006961872801184654,
            0.06102143973112106,
            0.05562421679496765,
            -0.2365519106388092,
            -0.000890699215233326,
            0.12825261056423187,
            -0.10263994336128235,
            0.06279246509075165,
            -0.024984225630760193,
            -0.11509958654642105,
            0.08386695384979248,
            -0.01412949152290821,
            0.2401997447013855,
            0.0684797614812851,
            -0.1259273886680603,
            -0.11305304616689682,
            0.15909640491008759,
            -0.19177305698394775,
            -0.09860588610172272,
            0.09434033930301666,
            -0.13458825647830963,
            -0.23078304529190063,
            -0.2746469974517822,
            0.01483390387147665,
            0.35195058584213257,
            0.14698421955108643,
            -0.1609697788953781,
            0.03465982526540756,
            -0.0525466650724411,
            0.006655549630522728,
            0.03046422265470028,
            0.1392480581998825,
            0.09234590828418732,
            -0.0839412733912468,
            -0.16117368638515472,
            -0.01175625342875719,
            0.2804982662200928,
            -0.027723263949155807,
            -0.05562986060976982,
            0.3155618906021118,
            -0.021559815853834152,
            -0.03359541669487953,
            0.02328915148973465,
            0.07679963856935501,
            -0.021319780498743057,
            0.05008380115032196,
            -0.09643948078155518,
            0.04165560007095337,
            -0.015833616256713867,
            -0.08092982321977615,
            -0.05441147834062576,
            0.1445293426513672,
            -0.14226408302783966,
            0.17009547352790833,
            -0.06188269704580307,
            0.02318316325545311,
            -0.015886299312114716,
            -0.01389443501830101,
            -0.07478833198547363,
            -0.014020176604390144,
            0.18980850279331207,
            -0.2495647519826889,
            0.15443718433380127,
            0.17237237095832825,
            0.08710247278213501,
            0.2200014591217041,
            0.005251049529761076,
            0.1355864405632019,
            0.013213466852903366,
            -0.06810279190540314,
            -0.23358982801437378,
            -0.05896403640508652,
            -0.003321828320622444,
            0.013745575211942196,
            -0.04125063121318817,
            0.12358564138412476,
        ];

        assert_eq!(photo.faces[0].measurements, face_1_measurements);
        assert_eq!(photo.faces[1].measurements, face_2_measurements);
        assert_eq!(photo.faces[2].measurements, face_3_measurements);

        let face_1_location = photo.faces[0].face_location.unwrap();
        let expected_face_1_location = Rectangle {
            left: 812,
            top: 92,
            right: 891,
            bottom: 171,
        };

        assert_eq!(face_1_location, expected_face_1_location);

        let face_2_location = photo.faces[1].face_location.unwrap();
        let expected_face_2_location = Rectangle {
            left: 12,
            top: 156,
            right: 91,
            bottom: 235,
        };

        assert_eq!(face_2_location, expected_face_2_location);

        let face_3_location = photo.faces[2].face_location.unwrap();
        let expected_face_3_location = Rectangle {
            left: 500,
            top: 76,
            right: 579,
            bottom: 155,
        };

        assert_eq!(face_3_location, expected_face_3_location);

        fs::remove_dir_all(format!("storage/images/{}", photo.uuid)).unwrap();
    }
}
